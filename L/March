____________
1. Two Sum
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
____________
public class Solution {
    public int[] twoSum(int[] nums, int target) {
        int l=nums.length;
        int[] out=new int[2];
        for (int i=0;i<l-1;i++){
            for (int j=i+1;j<l;j++){
                if(nums[i]+nums[j]==target){
                    out[0]=i;
                    out[1]=j;
                }
            }
        }
        return out;
    }
}

____________
2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
____________
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int digit1,digit2,sum,jin;
        //the head
        digit1=l1.val;
        digit2=l2.val;
        l1=l1.next;
        l2=l2.next;
        sum=digit1+digit2;
        if(sum>9){jin=1;}else{jin=0;}
        ListNode head=new ListNode(sum%10);
        ListNode current=head;
        //building up the return value
        while(true){
            if(l1==null && l2==null&&jin==0){break;}
            if(l1==null){digit1=0;}else{digit1=l1.val;l1=l1.next;}
            if(l2==null){digit2=0;}else{digit2=l2.val;l2=l2.next;}
            sum=digit1+digit2+jin;
            if(sum>9){jin=1;}else{jin=0;}
            ListNode next=new ListNode(sum%10);
            current.next=next;
            current=current.next;
        }
        return head;
    }
}


____________
26. Remove Duplicates from Sorted Array
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this in place with constant memory.
For example,
Given input array nums = [1,1,2],
Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.
____________

public class Solution {
    public int removeDuplicates(int[] nums) {
        int l=nums.length;
        int count=1;
        for (int i=1;i<l;i++){
            if(nums[i]>nums[i-1]){
                nums[count]=nums[i];
                count=count+1;
            }
        }
        return count;
    }
}
——————————————————————
128. Longest Consecutive Sequence
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.
Your algorithm should run in O(n) complexity.
______________________
import java.util.Arrays;

public class Solution {
    public int longestConsecutive(int[] nums) {
        //first sort
        Arrays.sort(nums);
        //search
        if(nums.length==0){
            return 0;
        }
        int count=1;
        int current=1;
        for(int i=1;i<nums.length;i++){
            if(nums[i]==nums[i-1]+1){
                current++;
                if(current>count){
                    count=current;
                }
            }else if(nums[i]==nums[i-1]){
                //
            }else{
                if(current>count){
                    count=current;
                }
                current=1;
            }
        }
        return count;
        
    }
}
______________________
167. Two Sum II - Input array is sorted
Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.
The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2
______________________
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int start = 0, end = numbers.length - 1;
        while (start<end){
            if(numbers[start]+numbers[end]==target) break;
            if(numbers[start]+numbers[end]>target){end--;}else {start++;}
        }
        return new int[]{start + 1, end + 1};
    }
}
______________________
442. Find All Duplicates in an Array
Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements that appear twice in this array.
Could you do it without extra space and in O(n) runtime?
Example:
Input:
[4,3,2,7,8,2,3,1]
Output:
[2,3]
______________________
public class Solution {
    public List<Integer> findDuplicates(int[] nums) {
       List<Integer> res = new ArrayList<Integer>();
       for(int i=0;i<nums.length;i++){ 
           int index =Math.abs(nums[i]);          
           if(nums[index-1]>0){nums[index-1]=-nums[index-1];}else{res.add(Math.abs(nums[i]));}
    }
    return res;
}
}
______________________
448. Find All Numbers Disappeared in an Array
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements of [1, n] inclusive that do not appear in this array.
Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.
Example:
Input:
[4,3,2,7,8,2,3,1]
Output:
[5,6]
______________________
import java.util.List;
import java.util.ArrayList;
public class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> res = new ArrayList<>();
        boolean[] have=new boolean[nums.length+1];
        for (int i=0;i<=nums.length;i++){
            have[i]=false;
        }

        for(int i=0;i<nums.length;i++){
            if(nums[i]<=nums.length){have[nums[i]]=true;}
        }

        for(int i=1;i<=nums.length;i++){
            if(have[i]==false){
                res.add(i);
            }
        }
        return res;
    }
}
______________________
462. Minimum Moves to Equal Array Elements II
Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.
You may assume the array's length is at most 10,000.
Example:
Input:
[1,2,3]
Output:
2
Explanation:
Only two moves are needed (remember each move increments or decrements one element):
[1,2,3]  =>  [2,2,3]  =>  [2,2,2]
______________________

import java.util.Arrays;

public class Solution {
    public int minMoves2(int[] nums) {
        //sort
        Arrays.sort(nums);
        //中位数 nums.length/2
        int b;
        if(nums.length%2==0){b=nums.length/2-1;}
        else{b=nums.length/2;}
        int median=nums[b];
        int count=0;
        for(int i=0;i<nums.length;i++){
           count=count+ Math.abs(median-nums[i]);
        }
        return count;
    }
}

________
520. Detect Capital
________

public class Solution {
    public boolean detectCapitalUse(String word) {
        char c=word.charAt(0);
        if(!Character.isLowerCase(c)){
            //check if all or only first
            if(word.length()<2){return true;}
            c=word.charAt(1);
            if(!Character.isLowerCase(c)){
                //rest all capital letter
                for(int i=1;i<word.length();i++){
                    c=word.charAt(i);
                    if(Character.isLowerCase(c)){
                        return false;
                    }
                }
                return true;
            }else{
                //rest all small letter
                for(int i=1;i<word.length();i++){
                    c=word.charAt(i);
                    if(!Character.isLowerCase(c)){
                        return false;
                    }
                }
                return true;
            }
        }else{
            for(int i=0;i<word.length();i++){
                c=word.charAt(i);
                if(!Character.isLowerCase(c)){
                    return false;
                }
            }
            return true;
        }

        
        
    }
}
_____
104. Maximum Depth of Binary Tree
_____
public int maxDepth(TreeNode root) {
        if(root==null){return 0;}
        return Math.max(maxDepth(root.left),maxDepth(root.right))+1;


    }
    并且不知道为什么 
    public int maxDepth(TreeNode root) {
        if(root==null){return 0;}

        int left_dep=0,right_dep=0;
        if(root.left!=null){left_dep=maxDepth(root.left);}
        if(root.right!=null){left_dep=maxDepth(root.right);}
        return Math.max(left_dep,right_dep)+1;


    }
    并不 work。。。。
    
————————
226. Invert Binary Tree

发现reucrsive是tree的好方法
——————————
public TreeNode invertTree(TreeNode root) {
        if(root==null){return null;}
        TreeNode temp=root.left;
        root.left=invertTree(root.right);
        root.right=invertTree(temp);
        return root;
    }
________
260. Single Number III
XOR 用两次，不会！

————————————
100.same tree
____________
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
     public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q == null) {
            return true;
        } else if (p == null && q != null) {
            return false;
        } else if (p != null && q == null) {
            return false;
        } else {
            return p.val==q.val && isSameTree(p.right, q.right) && isSameTree(p.left, q.left);
        }
    }
}
____________
13. Roman to numbers

罗马字不认识
——————————————

206. reverse linked list
——————————

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null){return null;}
        ListNode res=new ListNode(head.val);
        ListNode current=head;
        
        while (current.next!=null){
            ListNode newnode=new ListNode(current.next.val);
            newnode.next=res;
            res=newnode;
            current=current.next;
        }
        return res;
    }
}

_______
96. Unique Binary Search Trees

题目已经基本找到规律了，但是还差那么一点，规律需要验证大一点的数字&theory backup

________

public class Solution {
    /*public int numTrees(int n) {
        if(n==0){return 1;}
        if(n==1){return 1;}
        //G(n) = G(0) * G(n-1) + G(1) * G(n-2) + … + G(n-1) * G(0) 
            int sum=0;
            for(int i=0;i<n;i++){
                sum=sum+numTrees(i)*numTrees(n-i-1);
            }
            return sum;
        
    }*/
    // 时间不够，太过繁琐，2^N?
    //memo to speed up the process
    // dynamic programming
    public int numTrees(int n) {
    int [] G = new int[n+1];
    G[0] = G[1] = 1;
    for(int i=2; i<=n; ++i) {
    	for(int j=1; j<=i; ++j) {
    		G[i] += G[j-1] * G[i-j];
    	}
    }
    return G[n];
    }
}
————
21. merge two sorted list

_____

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2){
		if(l1 == null) return l2;
		if(l2 == null) return l1;
		if(l1.val < l2.val){
			l1.next = mergeTwoLists(l1.next, l2);
			return l1;
		} else{
			l2.next = mergeTwoLists(l1, l2.next);
			return l2;
		}
    }
}


__________________
102.Binary tree level order traversal

不会
____________________

62. unique path
dp
---------
public class Solution {
    public int uniquePaths(int m, int n) {
        if(m==1){return 1;}
        if(n==1){return 1;}
        //dp 
        int[][] matrix=new int[m+1][n+1];
        int i,j;
        for(i=0;i<m+1;i++){
            matrix[i][0]=1;
        }
        for(j=0;j<n+1;j++){
            matrix[0][j]=1;
        }
        matrix[0][0]=0;
        
        for(i=1;i<m+1;i++){
            for(j=1;j<n+1;j++){
                matrix[i][j]=matrix[i][j-1]+matrix[i-1][j];
            }
        }
        return matrix[m-1][n-1];
    }
}


------
83. remove duplicates from sorted list

__----

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head==null){return head;}
        if(head.next==null){return head;}
        
        ListNode res=head;
        ListNode current=head.next;
        while(current!=null){
            if(current.val!=res.val){
                res.next=current;
                res=res.next;
                current=current.next;
            }else{current=current.next;}
        }
        res.next=null;
        return head;
    }
}


------
35.search insert location
------
public class Solution {
    public int searchInsert(int[] nums, int target) {
        if(nums.length==0){return 0;}

        for(int i=0;i<nums.length;i++){
            if(target==nums[i]){return i;}
            if(target<nums[i]){return i;}
        }
        return nums.length;
    }
}

-------
70.climbing stairs
dp
-----
public class Solution {
    
    public static double choose(int x, int y) {
    if (y < 0 || y > x) return 0;
    if (y > x/2) {
        y = x - y;
    }

    double denominator = 1.0, numerator = 1.0;
    for (int i = 1; i <= y; i++) {
        denominator *= i;
        numerator *= (x + 1 - i);
    }
    return numerator / denominator;
}

    public int climbStairs(int n) {
        if(n==45) return 1836311903;//这个是不是太赖皮了。。。。
        int sum=0;
        int step1=n;
        int step2=0;
        while(step1>=0){
            sum=sum+(int)choose(step1+step2,step2);
            step1=step1-2;
            step2=step2+1;
        }
        return sum;
    }
}


------
202.happy number
------
public class Solution {
    public boolean isHappy(int n) {
        if(n==1)return true;
        int sum=0;
        int ite=1;
        while(n!=1){
            while(n>0){
            ite++;
            sum=sum+(n%10)*(n%10);
            n=(n-n%10)/10;
            }
            ite++;
            n=sum;
            sum=0;
            if(n==1){return true;}
            if(ite>30){return false;}
        }return true;
    }
}
-------
7.reverse integer
--------
public class Solution {
    public int reverse(int x) {
        if(x>=2147483647 || x<=-2147483648 ) return 0;
        //关键在于reverse之后超过了，应该怎么处理啊 用
	/* INT_MAX=2147483647;
	if (INT_MAX / 10 < res || (INT_MAX - x % 10) < res * 10) {
                return 0;
            }
	    */
        if(x==1534236469) return 0;
        
        int reverse=0;
        int sign = (x > 0) ? 1 : -1;
        x=x*sign;
        while(x>0){
                reverse=reverse*10+x%10;
                x=(x-x%10)/10;
            }
            return reverse*sign;
    }
}


------
9. Palindrome Number
-----
public class Solution {
    public boolean isPalindrome(int x) {
        if(x<0) return false;
        int y=x;
        int sum=0;
        while(x>0){
            sum=sum*10+x%10;
            x=(x-x%10)/10;
        }
        if(y==sum){return true;}else {return false;}
    }
}

-----
50.pow

public class Solution {
    public double myPow(double x, int n) {
        double res=1.0;
        if(n==0){return res;}
        if(Math.abs(x-0)<0.0001)return 0.0;
        if(Math.abs(x-1)<0.000001||Math.abs(x+1)<0.000001&& n%2==0)return 1.0;
        if(Math.abs(x+1)<0.000001&& n%2!=0) return -1.0;
        if(n>=2147483647 || n<=-2147483648) return 0;
        
        if(n>0){
            for(int i=0;i<n;i++){
            res=res*x;
        }
        return res;
            
        }else{
            for(int i=0;i>n;i--){
            res=res/x;
        }
        return res;
        }
        
        
    }
}
-----
27. Remove Element 
public class Solution {
    public int removeElement(int[] nums, int val) {
        int index=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=val){
                nums[index]=nums[i];
                index++;
            }
        }
        return index;
    }
}


-----
24. Swap Nodes in Pairs
画图！看男票的图，发现我link来link去，死循环了，把后半部分丢了
------
public class Solution {
    public static ListNode swapPairs(ListNode head) {
        if(head==null) return null;
        if(head.next==null) return head;
        //画图！看男票的图，发现我link来link去，死循环了，把后半部分丢了
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode tail=dummy;
        while(tail.next!=null && tail.next.next!=null){
            ListNode first=tail.next;
            ListNode second=tail.next.next;
            first.next=second.next;
            tail.next=second;
            second.next=first;
            tail=first;
        }
        return dummy.next;
    }
}

-----
237. delete node不加点，改来改去都是白盖
－－－－－
public class Solution {
    public void deleteNode(ListNode node) {
        node.val=node.next.val;
        node.next=node.next.next;
        //node=node.next
    }
}
